[alias]
   branch-name = "!git rev-parse --abbrev-ref HEAD" # useful in other aliases
   st = status --short --branch
   ci = commit
   co = checkout
   br = branch
   # Push the current branch + set it to track upstream branch
   publish = "!git push -u origin $(git branch-name)"
   unpublish = "!git push origin :$(git branch-name)"
   kill-branch = "!f() { git push origin :$@; git br -D $@;  }; f"
   unstage = reset HEAD --
   ls = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate
   since = !git log $(git merge-base --fork-point main)..HEAD
   conflicts = !git ls-files -u  | cut -f 2 | sort -u
   delete-merged-branches = "!git co main && git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"
   flush = "!git branch --merged | grep -v '*' | xargs -n 1 git branch -d"
   rm-orig = "!git ls-files --others --exclude-standard | grep '\\.orig$' | xargs rm"
   fb = "!f() { git checkout -b $@ origin/main; }; f"
   # Gerrit aliases
   review = push origin HEAD:refs/for/main
   review-wip = push origin HEAD:refs/for/main%wip
   review-ready = push origin HEAD:refs/for/main%ready
   review-private = push origin HEAD:refs/for/main%notify=NONE,private
   # fixup per https://stackoverflow.com/a/21148981
   fixup = "!sh -c '(git diff-files --quiet || (echo Unstaged changes, please commit or stash with --keep-index; exit 1)) && COMMIT=$(git rev-parse $1) && git commit --fixup=$COMMIT && git rebase -i --autosquash $COMMIT~1' -"
